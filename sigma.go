// Code generated by github.com/bradleyjkemp/sigma-go/sigmac DO NOT EDIT.
package main

import (
	sigma "github.com/bradleyjkemp/sigma-go"

	"sort"
)

var Rules = map[string]sigma.Rule{}

var Configs []sigma.Config

func registerRule(contents string) {
	// TODO: it'd be better if this were already parsed rather than being parsed at runtime
	rule, err := sigma.ParseRule([]byte(contents))
	if err != nil {
		panic(err)
	}

	id := rule.ID
	if id == "" {
		id = "MISSING_ID_" + rule.Title
	}

	if _, ok := Rules[id]; ok {
		panic("rule with id " + id + " already registered")
	}
	Rules[id] = rule
}

func registerConfig(contents string) {
	// TODO: it'd be better if this were already parsed rather than being parsed at runtime
	config, err := sigma.ParseConfig([]byte(contents))
	if err != nil {
		panic(err)
	}

	Configs = append(Configs, config)
	sort.Slice(Configs, func(i, j int) bool {
		return Configs[i].Order < Configs[j].Order
	})
}

func init() {
	registerConfig("title: Endpoint Security Framework log source conditions\norder: 20\nbackends:\n  - github.com/bradleyjkemp/sigma-go # Relies on the JSONPath extension\nlogsources:\n  esf-process-events:\n    category: process_creation\n    product: macos\n    index: ES_EVENT_TYPE_NOTIFY_EXEC\n\n  esf-file-events:\n    category: file_event\n    product: macos\n    index:\n      - ES_EVENT_TYPE_NOTIFY_CREATE\n      - ES_EVENT_TYPE_NOTIFY_OPEN\n      - ES_EVENT_TYPE_NOTIFY_WRITE\n      - ES_EVENT_TYPE_NOTIFY_CLOSE\n      - ES_EVENT_TYPE_NOTIFY_RENAME\n      - ES_EVENT_TYPE_NOTIFY_LINK\n      - ES_EVENT_TYPE_NOTIFY_UNLINK,\n\nfieldmappings:\n  # Process events\n  ProcessId: pid\n  ProcessName: $.process.arguments[0]\n  Image:\n    - $.process.path\n    - $.file.process.path # for file events\n  CommandLine: $.process.arguments\n  ParentProcessId: $.process.ppid\n\n  # File events\n  TargetFilename: $.file.destination")
}
